# Renombrar columnas para que coincidan con el código esperado
colnames(nodos)[colnames(nodos) == "Organization Name"] <- "Id"
# Convertir la columna 'Industry Groups' en listas de industrias por empresa
nodos$`Industry Groups` <- str_split(nodos$`Industry Groups`, ",\\s*")
# Crear una matriz vacía del tamaño de la red
num_empresas <- nrow(nodos)
industry_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(industry_matrix) <- nodos$Id
colnames(industry_matrix) <- nodos$Id
# Comparar cada par de empresas
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
# Obtener industrias de cada empresa
industries_i <- unlist(nodos$Industry.Groups[i])
industries_j <- unlist(nodos$Industry.Groups[j])
# Revisar si hay al menos una industria en común
if (length(intersect(industries_i, industries_j)) > 0) {
industry_matrix[i, j] <- 1
industry_matrix[j, i] <- 1
}
}
}
# Revisar la matriz
industry_matrix
# Cargar paquetes necesarios
library(stringr)
library(stringr)
# Renombrar columnas para que coincidan con el código esperado
colnames(nodos)[colnames(nodos) == "Organization Name"] <- "Id"
# Convertir la columna 'Industry Groups' en listas de industrias por empresa
nodos$`Industry Groups` <- str_split(nodos$`Industry Groups`, ",\\s*")
# Crear una matriz vacía del tamaño de la red
num_empresas <- nrow(nodos)
industry_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(industry_matrix) <- nodos$Id
colnames(industry_matrix) <- nodos$Id
# Comparar cada par de empresas
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
# Obtener industrias de cada empresa
industries_i <- unlist(nodos$`Industry Groups`[i])
industries_j <- unlist(nodos$`Industry Groups`[j])
# Revisar si hay al menos una industria en común
if (length(intersect(industries_i, industries_j)) > 0) {
industry_matrix[i, j] <- 1
industry_matrix[j, i] <- 1
}
}
}
# Revisar la matriz
industry_matrix
# Cargar paquetes necesarios
library(stringr)
library(stringr)
# Renombrar columnas para que coincidan con el código esperado
colnames(nodos)[colnames(nodos) == "Organization Name"] <- "Id"
# Convertir la columna 'Industry Groups' en listas de industrias por empresa
nodos$`Industry Groups` <- str_split(nodos$`Industry Groups`, ",\\s*")
# Crear una matriz vacía del tamaño de la red
num_empresas <- nrow(nodos)
industry_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(industry_matrix) <- nodos$Id
colnames(industry_matrix) <- nodos$Id
# Comparar cada par de empresas
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
# Obtener industrias de cada empresa
industries_i <- unlist(nodos$`Industry Groups`[i])
industries_j <- unlist(nodos$`Industry Groups`[j])
# Revisar si hay al menos una industria en común
if (length(intersect(industries_i, industries_j)) > 0) {
industry_matrix[i, j] <- 1
industry_matrix[j, i] <- 1
}
}
}
# Revisar la matriz
industry_matrix[1:5, 1:5]
# Cargar paquetes necesarios
library(stringr)
library(stringr)
# Renombrar columnas para que coincidan con el código esperado
colnames(nodos)[colnames(nodos) == "Organization Name"] <- "Id"
# Convertir la columna 'Industry Groups' en listas de industrias por empresa
nodos$`Industry Groups` <- str_split(nodos$`Industry Groups`, ",\\s*")
# Crear una matriz vacía del tamaño de la red
num_empresas <- nrow(nodos)
industry_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(industry_matrix) <- nodos$Id
colnames(industry_matrix) <- nodos$Id
# Comparar cada par de empresas
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
# Obtener industrias de cada empresa
industries_i <- unlist(nodos$`Industry Groups`[i])
industries_j <- unlist(nodos$`Industry Groups`[j])
# Revisar si hay al menos una industria en común
if (length(intersect(industries_i, industries_j)) > 0) {
industry_matrix[i, j] <- 1
industry_matrix[j, i] <- 1
}
}
}
# Crear matriz de similitud de ubicación
num_empresas <- nrow(nodos)
location_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(location_matrix) <- nodos$Id
colnames(location_matrix) <- nodos$Id
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
if (nodos$`Headquarters Location`[i] == nodos$`Headquarters Location`[j]) {
location_matrix[i, j] <- 1
location_matrix[j, i] <- 1
}
}
}
X_list <- list(industry_matrix, location_matrix)
qap_fit <-netlogit(adjacency_matrix,X_list)
dim(adjacency_matrix)
dim(industry_matrix)
dim(location_matrix)
common_ids <- rownames(adjacency_matrix)  # Empresas en la matriz de adyacencia
industry_matrix <- industry_matrix[common_ids, common_ids]
location_matrix <- location_matrix[common_ids, common_ids]
X_list <- list(industry_matrix, location_matrix)
qap_fit <-netlogit(adjacency_matrix,X_list)
X_list <- list(industry_matrix, location_matrix)
qap_fit <-netlogit(adjacency_matrix,X_list, rep = 10)
top_nodes <- names(sort(degree(g), decreasing = TRUE))[1:10]  # Toma 10 nodos más conectados
g <- graph_from_adjacency_matrix(adjacency_matrix, mode = "directed", diag = FALSE)
top_nodes <- names(sort(degree(g), decreasing = TRUE))[1:10]  # Toma 10 nodos más conectados
common_ids <- rownames(adjacency_matrix)  # Empresas en la matriz de adyacencia
industry_matrix <- industry_matrix[common_ids, common_ids]
location_matrix <- location_matrix[common_ids, common_ids]
library(readr)
library(tidyverse)
library(igraph)
library(ergm)
library(network)
library(tergm)
nodos <- readxl::read_excel(file.path(getwd(), "Base Limpia.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "Arcos_filtrados.xlsx"))
head(nodos)
head(arcos)
g <- graph_from_data_frame(d = arcos, vertices = nodos, directed = TRUE)
print(g)  # Información del grafo
plot(g, vertex.size=10, vertex.label=NA)  # Visualizar
edges_df <- as_data_frame(g, what = "edges")
# Filtrar loops usando las columnas correctas
loops <- edges_df[edges_df$from == edges_df$to, ]
edges_df <- edges_df[edges_df$from != edges_df$to, ]
print(head(edges_df))  # Ver primeras filas
print(dim(edges_df))   # Ver dimensiones (filas, columnas)
samplike <- network(edges_df, directed = TRUE, matrix.type = "edgelist", loops = FALSE)
print(list.vertex.attributes(samplike))  # Ver atributos del grafo
# Crear los atributos vacíos si no existen
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
# Instalar y cargar las librerías necesarias
library(statnet)
library(readxl)
# Leer los datos
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
nodos_fase2 <- readxl::read_excel(file.path(getwd(), "nodos_fase2.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "arcos_fase2.xlsx"))
columna_0 <- nodos_fase2$`0`
# Filtrar las filas de nodos
nodos_filtrado <- nodos %>%
filter(`Organization Name` %in% columna_0)
arcos_sin_loops <- arcos[arcos[, 1] != arcos[, 2], ]
# Verificar valores faltantes en nodos
sum(is.na(nodos$`Number of Investments`))  # ¿Cuántos valores NA hay?
# Reemplazar NA con la mediana en vez de 0 (si tiene sentido)
nodos$`Number of Investments`[is.na(nodos$`Number of Investments`)] <- median(nodos$`Number of Investments`, na.rm = TRUE)
# Convertir la variable a numérica
nodos$`Headquarters Location`[is.na(nodos$`Headquarters Location`)] <- "Unknown"  # Asignar 'Unknown' a los valores faltantes
nodos$`Number of Investments` <- as.numeric(nodos$`Number of Investments`)
# Crear un objeto network
samplike <- network(arcos_sin_loops, vertices = nodos, directed = TRUE, matrix.type = "edgelist", vertex.attrnames = names(nodos))
# Asignar atributos a la red
#set.vertex.attribute(samplike, "location", nodos$`Headquarters Location`)
network.vertex.names(samplike) <- nodos$`Organization Name`
samplike %v% "location" <- nodos$`Headquarters Location`
samplike %v% "status" <- nodos$`Operating Status`
samplike %v% "investments" <- nodos$`Number of Investments`  # Ya sin NA
# Verificar que no haya valores NA en los atributos
sum(is.na(samplike %v% "investments"))  # Debe ser 0
# Ajustar el modelo ERGM
m1 <- ergm(samplike ~
edges +
nodematch("location") +
nodecov("investments") +
nodematch("status"))
# Resumen del modelo
summary(m1)
gf1 <- gof(m1, R=100)
adjacency_matrix <- as.matrix(as_adjacency_matrix(g, attr = NULL))
# Cargar paquetes necesarios
library(stringr)
library(stringr)
# Renombrar columnas para que coincidan con el código esperado
colnames(nodos)[colnames(nodos) == "Organization Name"] <- "Id"
# Convertir la columna 'Industry Groups' en listas de industrias por empresa
nodos$`Industry Groups` <- str_split(nodos$`Industry Groups`, ",\\s*")
# Crear una matriz vacía del tamaño de la red
num_empresas <- nrow(nodos)
industry_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(industry_matrix) <- nodos$Id
colnames(industry_matrix) <- nodos$Id
# Comparar cada par de empresas
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
# Obtener industrias de cada empresa
industries_i <- unlist(nodos$`Industry Groups`[i])
industries_j <- unlist(nodos$`Industry Groups`[j])
# Revisar si hay al menos una industria en común
if (length(intersect(industries_i, industries_j)) > 0) {
industry_matrix[i, j] <- 1
industry_matrix[j, i] <- 1
}
}
}
# Crear matriz de similitud de ubicación
num_empresas <- nrow(nodos)
location_matrix <- matrix(0, nrow = num_empresas, ncol = num_empresas)
rownames(location_matrix) <- nodos$Id
colnames(location_matrix) <- nodos$Id
for (i in 1:num_empresas) {
for (j in i:num_empresas) {
if (nodos$`Headquarters Location`[i] == nodos$`Headquarters Location`[j]) {
location_matrix[i, j] <- 1
location_matrix[j, i] <- 1
}
}
}
dim(adjacency_matrix)
dim(industry_matrix)
dim(location_matrix)
common_ids <- rownames(adjacency_matrix)  # Empresas en la matriz de adyacencia
industry_matrix <- industry_matrix[common_ids, common_ids]
location_matrix <- location_matrix[common_ids, common_ids]
X_list <- list(industry_matrix, location_matrix)
qap_fit <-netlogit(adjacency_matrix,X_list, rep = 5)
summary(qap_fit)
qap_fit <-netlogit(adjacency_matrix,X_list, rep = 10)
summary(qap_fit)
library(readr)
library(tidyverse)
library(igraph)
library(ergm)
library(network)
library(tergm)
nodos <- readxl::read_excel(file.path(getwd(), "Base Limpia.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "Arcos_filtrados.xlsx"))
head(nodos)
head(arcos)
g <- graph_from_data_frame(d = arcos, vertices = nodos, directed = TRUE)
print(g)  # Información del grafo
plot(g, vertex.size=10, vertex.label=NA)  # Visualizar
edges_df <- as_data_frame(g, what = "edges")
# Filtrar loops usando las columnas correctas
loops <- edges_df[edges_df$from == edges_df$to, ]
edges_df <- edges_df[edges_df$from != edges_df$to, ]
print(head(edges_df))  # Ver primeras filas
print(dim(edges_df))   # Ver dimensiones (filas, columnas)
samplike <- network(edges_df, directed = TRUE, matrix.type = "edgelist", loops = FALSE)
print(list.vertex.attributes(samplike))  # Ver atributos del grafo
# Crear los atributos vacíos si no existen
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
# Instalar y cargar las librerías necesarias
library(statnet)
library(readxl)
# Leer los datos
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
nodos_fase2 <- readxl::read_excel(file.path(getwd(), "nodos_fase2.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "arcos_fase2.xlsx"))
columna_0 <- nodos_fase2$`0`
# Filtrar las filas de nodos
nodos_filtrado <- nodos %>%
filter(`Organization Name` %in% columna_0)
arcos_sin_loops <- arcos[arcos[, 1] != arcos[, 2], ]
# Verificar valores faltantes en nodos
sum(is.na(nodos$`Number of Investments`))  # ¿Cuántos valores NA hay?
# Reemplazar NA con la mediana en vez de 0 (si tiene sentido)
nodos$`Number of Investments`[is.na(nodos$`Number of Investments`)] <- median(nodos$`Number of Investments`, na.rm = TRUE)
# Convertir la variable a numérica
nodos$`Headquarters Location`[is.na(nodos$`Headquarters Location`)] <- "Unknown"  # Asignar 'Unknown' a los valores faltantes
nodos$`Number of Investments` <- as.numeric(nodos$`Number of Investments`)
# Crear un objeto network
samplike <- network(arcos_sin_loops, vertices = nodos, directed = TRUE, matrix.type = "edgelist", vertex.attrnames = names(nodos))
# Asignar atributos a la red
#set.vertex.attribute(samplike, "location", nodos$`Headquarters Location`)
network.vertex.names(samplike) <- nodos$`Organization Name`
samplike %v% "location" <- nodos$`Headquarters Location`
samplike %v% "status" <- nodos$`Operating Status`
samplike %v% "investments" <- nodos$`Number of Investments`  # Ya sin NA
# Verificar que no haya valores NA en los atributos
sum(is.na(samplike %v% "investments"))  # Debe ser 0
# Ajustar el modelo ERGM
m1 <- ergm(samplike ~
edges +
nodematch("location") +
nodecov("investments") +
nodematch("status"))
# Resumen del modelo
summary(m1)
exp(coef(m1))
# Instalar y cargar las librerías necesarias
library(statnet)
library(readxl)
# Leer los datos
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
nodos_fase2 <- readxl::read_excel(file.path(getwd(), "nodos_fase2.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "arcos_fase2.xlsx"))
columna_0 <- nodos_fase2$`0`
# Filtrar las filas de nodos
nodos_filtrado <- nodos %>%
filter(`Organization Name` %in% columna_0)
arcos_sin_loops <- arcos[arcos[, 1] != arcos[, 2], ]
# Verificar valores faltantes en nodos
sum(is.na(nodos$`Number of Investments`))  # ¿Cuántos valores NA hay?
# Reemplazar NA con la mediana en vez de 0 (si tiene sentido)
nodos$`Number of Investments`[is.na(nodos$`Number of Investments`)] <- median(nodos$`Number of Investments`, na.rm = TRUE)
# Convertir la variable a numérica
nodos$`Headquarters Location`[is.na(nodos$`Headquarters Location`)] <- "Unknown"  # Asignar 'Unknown' a los valores faltantes
nodos$`Number of Investments` <- as.numeric(nodos$`Number of Investments`)
# Crear un objeto network
samplike <- network(arcos_sin_loops, vertices = nodos, directed = TRUE, matrix.type = "edgelist", vertex.attrnames = names(nodos))
# Asignar atributos a la red
#set.vertex.attribute(samplike, "location", nodos$`Headquarters Location`)
network.vertex.names(samplike) <- nodos$`Organization Name`
samplike %v% "location" <- nodos$`Headquarters Location`
samplike %v% "status" <- nodos$`Operating Status`
samplike %v% "investments" <- nodos$`Number of Investments`  # Ya sin NA
# Verificar que no haya valores NA en los atributos
sum(is.na(samplike %v% "investments"))  # Debe ser 0
# Ajustar el modelo ERGM
m1 <- ergm(samplike ~
edges +
nodematch("location") +
nodecov("investments") +
nodematch("status"))
# Resumen del modelo
summary(m1)
print("ODDS RATIO")
exp(coef(m1))
# Instalar y cargar las librerías necesarias
library(statnet)
library(readxl)
# Leer los datos
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
nodos_fase2 <- readxl::read_excel(file.path(getwd(), "nodos_fase2.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "arcos_fase2.xlsx"))
columna_0 <- nodos_fase2$`0`
# Filtrar las filas de nodos
nodos_filtrado <- nodos %>%
filter(`Organization Name` %in% columna_0)
arcos_sin_loops <- arcos[arcos[, 1] != arcos[, 2], ]
# Verificar valores faltantes en nodos
sum(is.na(nodos$`Number of Investments`))  # ¿Cuántos valores NA hay?
# Reemplazar NA con la mediana en vez de 0 (si tiene sentido)
nodos$`Number of Investments`[is.na(nodos$`Number of Investments`)] <- median(nodos$`Number of Investments`, na.rm = TRUE)
# Convertir la variable a numérica
nodos$`Headquarters Location`[is.na(nodos$`Headquarters Location`)] <- "Unknown"  # Asignar 'Unknown' a los valores faltantes
nodos$`Number of Investments` <- as.numeric(nodos$`Number of Investments`)
# Crear un objeto network
samplike <- network(arcos_sin_loops, vertices = nodos, directed = TRUE, matrix.type = "edgelist", vertex.attrnames = names(nodos))
# Asignar atributos a la red
#set.vertex.attribute(samplike, "location", nodos$`Headquarters Location`)
network.vertex.names(samplike) <- nodos$`Organization Name`
samplike %v% "location" <- nodos$`Headquarters Location`
samplike %v% "status" <- nodos$`Operating Status`
samplike %v% "investments" <- nodos$`Number of Investments`  # Ya sin NA
# Verificar que no haya valores NA en los atributos
sum(is.na(samplike %v% "investments"))  # Debe ser 0
# Ajustar el modelo ERGM
m1 <- ergm(samplike ~
edges +
nodematch("location") +
nodecov("investments") +
nodematch("status"))
# Resumen del modelo
summary(m1)
exp(coef(m1))
library(readr)
library(tidyverse)
library(igraph)
library(ergm)
library(network)
library(tergm)
nodos <- readxl::read_excel(file.path(getwd(), "Base Limpia.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "Arcos_filtrados.xlsx"))
head(nodos)
head(arcos)
g <- graph_from_data_frame(d = arcos, vertices = nodos, directed = TRUE)
print(g)  # Información del grafo
plot(g, vertex.size=10, vertex.label=NA)  # Visualizar
edges_df <- as_data_frame(g, what = "edges")
# Filtrar loops usando las columnas correctas
loops <- edges_df[edges_df$from == edges_df$to, ]
edges_df <- edges_df[edges_df$from != edges_df$to, ]
print(head(edges_df))  # Ver primeras filas
print(dim(edges_df))   # Ver dimensiones (filas, columnas)
samplike <- network(edges_df, directed = TRUE, matrix.type = "edgelist", loops = FALSE)
print(list.vertex.attributes(samplike))  # Ver atributos del grafo
# Crear los atributos vacíos si no existen
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
# Instalar y cargar las librerías necesarias
library(statnet)
library(readxl)
# Leer los datos
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
nodos_fase2 <- readxl::read_excel(file.path(getwd(), "nodos_fase2.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "arcos_fase2.xlsx"))
columna_0 <- nodos_fase2$`0`
# Filtrar las filas de nodos
nodos <- nodos %>%
filter(`Organization Name` %in% columna_0)
arcos_sin_loops <- arcos[arcos[, 1] != arcos[, 2], ]
# Verificar valores faltantes en nodos
sum(is.na(nodos$`Number of Investments`))  # ¿Cuántos valores NA hay?
# Reemplazar NA con la mediana en vez de 0 (si tiene sentido)
nodos$`Number of Investments`[is.na(nodos$`Number of Investments`)] <- median(nodos$`Number of Investments`, na.rm = TRUE)
# Convertir la variable a numérica
nodos$`Headquarters Location`[is.na(nodos$`Headquarters Location`)] <- "Unknown"  # Asignar 'Unknown' a los valores faltantes
nodos$`Number of Investments` <- as.numeric(nodos$`Number of Investments`)
# Crear un objeto network
samplike <- network(arcos_sin_loops, vertices = nodos, directed = TRUE, matrix.type = "edgelist", vertex.attrnames = names(nodos))
# Asignar atributos a la red
#set.vertex.attribute(samplike, "location", nodos$`Headquarters Location`)
network.vertex.names(samplike) <- nodos$`Organization Name`
samplike %v% "location" <- nodos$`Headquarters Location`
samplike %v% "status" <- nodos$`Operating Status`
samplike %v% "investments" <- nodos$`Number of Investments`  # Ya sin NA
samplike %v% "industries" <- nodos$`Industries`
# Verificar que no haya valores NA en los atributos
sum(is.na(samplike %v% "investments"))  # Debe ser 0
# Ajustar el modelo ERGM
m1 <- ergm(samplike ~
edges +
nodematch("location") +
nodecov("investments") +
nodematch("status")+
nodematch("industries"))
# Resumen del modelo
summary(m1)
exp(coef(m1))
library(readr)
library(tidyverse)
library(igraph)
library(ergm)
library(network)
library(tergm)
nodos <- readxl::read_excel(file.path(getwd(), "Base Limpia.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "Arcos_filtrados.xlsx"))
head(nodos)
head(arcos)
g <- graph_from_data_frame(d = arcos, vertices = nodos, directed = TRUE)
print(g)  # Información del grafo
plot(g, vertex.size=10, vertex.label=NA)  # Visualizar
edges_df <- as_data_frame(g, what = "edges")
# Filtrar loops usando las columnas correctas
loops <- edges_df[edges_df$from == edges_df$to, ]
edges_df <- edges_df[edges_df$from != edges_df$to, ]
print(head(edges_df))  # Ver primeras filas
print(dim(edges_df))   # Ver dimensiones (filas, columnas)
samplike <- network(edges_df, directed = TRUE, matrix.type = "edgelist", loops = FALSE)
print(list.vertex.attributes(samplike))  # Ver atributos del grafo
# Crear los atributos vacíos si no existen
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
# Instalar y cargar las librerías necesarias
library(statnet)
library(readxl)
# Leer los datos
nodos <- readxl::read_excel(file.path(getwd(), "datos.xlsx"))
nodos_fase2 <- readxl::read_excel(file.path(getwd(), "nodos_fase2.xlsx"))
arcos <- readxl::read_excel(file.path(getwd(), "arcos_fase2.xlsx"))
columna_0 <- nodos_fase2$`0`
# Filtrar las filas de nodos
nodos <- nodos %>%
filter(`Organization Name` %in% columna_0)
arcos_sin_loops <- arcos[arcos[, 1] != arcos[, 2], ]
# Verificar valores faltantes en nodos
sum(is.na(nodos$`Number of Investments`))  # ¿Cuántos valores NA hay?
# Reemplazar NA con la mediana en vez de 0 (si tiene sentido)
nodos$`Number of Investments`[is.na(nodos$`Number of Investments`)] <- median(nodos$`Number of Investments`, na.rm = TRUE)
# Convertir la variable a numérica
nodos$`Headquarters Location`[is.na(nodos$`Headquarters Location`)] <- "Unknown"  # Asignar 'Unknown' a los valores faltantes
nodos$`Number of Investments` <- as.numeric(nodos$`Number of Investments`)
# Crear un objeto network
samplike <- network(arcos_sin_loops, vertices = nodos, directed = TRUE, matrix.type = "edgelist", vertex.attrnames = names(nodos))
# Asignar atributos a la red
#set.vertex.attribute(samplike, "location", nodos$`Headquarters Location`)
network.vertex.names(samplike) <- nodos$`Organization Name`
samplike %v% "location" <- nodos$`Headquarters Location`
samplike %v% "status" <- nodos$`Operating Status`
samplike %v% "investments" <- nodos$`Number of Investments`  # Ya sin NA
samplike %v% "industries" <- nodos$`Industries`
# Verificar que no haya valores NA en los atributos
sum(is.na(samplike %v% "investments"))  # Debe ser 0
# Ajustar el modelo ERGM
m1 <- ergm(samplike ~
edges +
nodematch("location") +
nodecov("investments") +
nodematch("status")+
nodematch("industries"))
# Resumen del modelo
summary(m1)
exp(coef(m1))
gf1 <- gof(m1, R=100)
par(mfrow = c(3,2))
plot(gf1, main = "")
